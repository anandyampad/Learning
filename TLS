There are two types of Encryptions
    1. Asymmetric Encryptions
    2. Symmetric Encryptions

Asymmetric Encryptions
    In asymmetric Encryption, Two keys are used. Public key and Private Key.
    The server generates private and public keys and shares the Public key with the Client(Browser).

    The client uses Public Key to encrypt Content and sends it across the network. The server decrypts this content using its private key.

Symmetric Encryptions
    In Symmetric Encryptions, Only one key is used.
    The client and server used a single key o encrypt and decrypt data.


TLS/SSL
Generic Flow

SKEY => Session Key
PUBKEY => Public Key
PRIKEY => Privite Key

    Client              ----          `  Server creates Public(PUBKEY) and Privite(PRIKEY) keys                                ----             Server
    Client              <---             Server  shares PUBKEY with Client                                                     <---             Server
    Client              ----             Client Creates Single Session(SKEY) Key                                               ----             Server
    Client              --->             Client Encrypts SKEY with Servers PUBKEY and sends to Server                          --->             Server
    Client              ----             Server Uses PRIKRY to decrypt the SKEY, which is sent by the Client                   --->             Server
    Client              ----             Server and Client communicates with shared SKEY until it won't expire                 ----             Server
    Client              --->             Client sends data by encrypting it with SKEY                                          --->             Server
    Client              ----             Server Decrypts data by using SKEY                                                    ----             Server
    Client              <---             Server Sends data by encrypting using SKEY                                            <---             Server
    Client              ----             Client Decrypts data by using SKEY                                                    ----             Server




Public Key(PUBKEY) is shared as Certificate. This certificate will be signed by CA(Certificate Authority).
The receiver will have the CA public key to validate the certificate. 


Webserver(WS) first time adopting HTTPS:
CA's will have their own Public Key and Private Key. For example, Goggle CA(GCA) Will have its Private and Public Key.
WS will generate Public Key and Private Key.
WS will create CSR(Certificate Signing Request) with their Public and Private Key. And Requests GCA to Sign this.

GCA will sign this with its Private Key and Sends back to WS. This signed artifact is called a "Certificate".

CA => Certificate Authority 
Certificate => Actual Certificate Containing Servers Public Key.
CSR => Certificate signing Request, This request will be issued to receive a certificate from CA.

https://www.youtube.com/watch?v=T4Df5_cojAs

Open SSL:

How to Generate a Key Pair:
Check for the version in your Working ENV: "openssl version -a"
Generating Key Pair with RSA algorithm and 2048 Key length: "openssl genrsa -out mytesting.key 2048"
This will give mytesting.key, And includes both public key and private key.

Need to extract the public key and private key from this key pair: "openssl rsa -in mytest.key -pubout -out mytest_pub.key"

```
ANANDK4-M-40W4:TLS anandk4$ openssl genrsa -out mytest.key 2048
Generating RSA private key, 2048 bit long modulus
............................................................................................+++++
...........................................+++++
e is 65537 (0x10001)
ANANDK4-M-40W4:TLS anandk4$ ls
mytest.key
ANANDK4-M-40W4:TLS anandk4$ openssl rsa -in mytest.key -pubout -out mytest_pub.key
writing RSA key
ANANDK4-M-40W4:TLS anandk4$ ls
mytest.key	mytest_pub.key
ANANDK4-M-40W4:TLS anandk4$ 
```


Create Certificate Signing Request(CSR): "openssl req -new -key mytest.key -out mytest.csr"
```
ANANDK4-M-40W4:TLS anandk4$ openssl req -new -key mytest.key -out mytest.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) []:IN
State or Province Name (full name) []:KA
Locality Name (eg, city) []:Bangalore
Organization Name (eg, company) []:AnandOrg
Organizational Unit Name (eg, section) []:AnandOrg
Common Name (eg, fully qualified host name) []:www.anandyampad.com
Email Address []:anand.yampad@gmail.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
ANANDK4-M-40W4:TLS anandk4$ ls
mytest.csr	mytest.key	mytest_pub.key
ANANDK4-M-40W4:TLS anandk4$ 
```

For Self Signing the Certificate: "openssl x509 -in mytest.csr -out mytest.crt -req -signkey mytest.key -days 365"
```
ANANDK4-M-40W4:TLS anandk4$ ls
mytest.csr	mytest.key	mytest_pub.key
ANANDK4-M-40W4:TLS anandk4$ openssl x509 -in mytest.csr -out mytest.crt -req -signkey mytest.key -days 365
Signature ok
subject=/C=IN/ST=KA/L=Bangalore/O=AnandOrg/OU=AnandOrg/CN=www.anandyampad.com/emailAddress=anand.yampad@gmail.com
Getting Private key
ANANDK4-M-40W4:TLS anandk4$ ls
mytest.crt	mytest.csr	mytest.key	mytest_pub.key
ANANDK4-M-40W4:TLS anandk4$ 
```

Extracting Public Key from Certificate:"openssl x509 -in mytest.crt -pubkey -noout -out mytext1.pub"
```
ANANDK4-M-40W4:TLS anandk4$ openssl x509 -in mytest.crt -pubkey -noout -out mytext1.pub
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5y9XM6aRUdT9LVt2F6yX
5z7PgBdU2AbU2w7BMJTtJdjc6h4FPjIXXSlUno7pO39n0xGXdfzPPWi+wvar5W4Y
SqUH4Ulnf1kdeGJexb7kMNnGtAi67i1YI+ktF1cO5nAohQL8W6fLz6Fc5u/79N9s
77gHhhDhGqYTq3UySty3IqZzPbmoeH8uWyxtD2zVgmFg4qtQhAdCt5fiYzhX3Rp5
LdqRaW/RN2mWN4SL6cNXK8L5kcaXqoQ0cYDz9fIwBvB/z9sSKtxIYBbQb/hYraZX
ONF98wODqtSSBKDqZfpfDOe6onqQ5dufTKBV5/UrrRFgI+eOSdN+7p5OjV9/QB2y
nQIDAQAB
-----END PUBLIC KEY-----
ANANDK4-M-40W4:TLS anandk4$ ls
mytest.crt	mytest.csr	mytest.key	mytest_pub.key
ANANDK4-M-40W4:TLS anandk4$ 
```


JWT Token:
Issued by the authentication server, and used to authorize the user for the claimed resources.
It will have three parts
Header
Body
Signature

In SSE:
SSE Core issues the JWT Token(access token) to the client application after it's validated with the Client Id and Client Secret.
The JWT Token will be signed by the Private Key of the SSE.
The Corresponding Public KEy will be given to Eventing, And stored in the S3 bucket.

Once Eventing receives the HTTP/WS Request from the Client, It Validates the Token, By comparing it with the PUblic key Present in the S3.

Sample Token will have
HEADER:
ALGORITHM & TOKEN TYPE

{
  "alg": "RS256",
  "typ": "JWT"
}

PAYLOAD:DATA

{
  "iss": "SSE",
  "sub": "Services",
  "exp": 1689073080,
  "iat": 1689069480,
  "jti": "a01e8bca-63d6-4607-b55b-10467b711ca4",
  "aud": [
    "SSE"
  ],
  "id": "54f7b840-5541-4306-915f-7732ce9e6736",
  "subscriptions": [
    "eventing",
    "raw-event-access",
    "cdo-event-access",
    "vault",
    "ctr-incidents"
  ],
  "jwtType": "access",
  "serviceName": "Eventing",
  "version": "v2"
}

SECRET:
RSASHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  
Public Key in SPKI, PKCS #1, X.509 Certificate, or JWK string format.
,
  
Private Key in PKCS #8, PKCS #1, or JWK string format. The key never leaves your browser.

)




















